{"version":3,"sources":["store/index.ts","components/CurrentUser/index.tsx","components/CurrentUser/CurrentUser.tsx","Api/Api.ts","components/TodosList/index.tsx","components/TodosList/TodosList.tsx","components/SearcAndFilter/index.tsx","components/SearcAndFilter/SearchAndFilter.tsx","App.tsx","index.tsx"],"names":["LOAD_TODOS","LOAD_USER","SET_SELECTED_USER_ID","SET_SEARCH_TITLE","SET_FILTER_PARAMETER","TOGGLE_TODO_STATUS","SET_USER_ERROR","initialState","selectedUserId","todos","filterParameter","searchTitle","userError","user","id","createdAt","updatedAt","name","username","email","phone","website","store","createStore","state","action","type","payload","composeWithDevTools","CurrentUser","dispatch","useDispatch","useSelector","useEffect","a","serverError","userId","console","log","fetch","then","responce","json","userFromServer","clearHandler","className","onClick","userLoader","TodosList","visibleTodos","filter","todo","title","includes","completed","userSetter","event","currentTarget","dataset","Number","changeUser","useMemo","handleStatusChange","todoCopy","changedTodoIndex","findIndex","target","map","classNames","htmlFor","checked","onChange","SearchAndFilter","searchInput","_","debounce","value","placeholder","App","Root","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.6e7ab1dd.chunk.js","sourcesContent":["import { createStore, AnyAction } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\n\n// Action types - is just a constant. MUST have a unique value.\nconst LOAD_TODOS = 'LOAD_TODOS';\nconst LOAD_USER = 'LOAD_USER';\nconst SET_SELECTED_USER_ID = 'SET_SELECTED_USER_ID';\nconst SET_SEARCH_TITLE = 'SET_SEARCH_TITLE';\nconst SET_FILTER_PARAMETER = 'SET_FILTER_PARAMETER';\nconst TOGGLE_TODO_STATUS = 'TOGGLE_TODO_STATUS';\nconst SET_USER_ERROR = 'SET_USER_ERROR';\n\nconst initialState: RootState = {\n  selectedUserId: 0,\n  todos: [],\n  filterParameter: 'All',\n  searchTitle: '',\n  userError: '',\n  user: {\n    id: 0,\n    createdAt: '',\n    updatedAt: '',\n    name: '',\n    username: '',\n    email: '',\n    phone: '',\n    website: '',\n  },\n};\n\n// rootReducer - this function is called after dispatching an action\nconst rootReducer = (state = initialState, action: AnyAction) => {\n  switch (action.type) {\n    case LOAD_TODOS:\n      return {\n        ...state,\n        todos: action.payload,\n      };\n\n    case LOAD_USER:\n      return {\n        ...state,\n        user: action.payload,\n      };\n\n    case SET_SELECTED_USER_ID:\n      return {\n        ...state,\n        selectedUserId: action.payload,\n      };\n\n    case SET_SEARCH_TITLE:\n      return {\n        ...state,\n        searchTitle: action.payload,\n      };\n\n    case SET_FILTER_PARAMETER:\n      return {\n        ...state,\n        filterParameter: action.payload,\n      };\n\n    case TOGGLE_TODO_STATUS:\n      return {\n        ...state,\n        todos: action.payload,\n      };\n\n    case SET_USER_ERROR:\n      return {\n        ...state,\n        userError: action.payload,\n      };\n\n    default:\n      return state;\n  }\n};\n\nconst store = createStore(rootReducer, composeWithDevTools());\n\nexport default store;\n","import { CurrentUser } from './CurrentUser';\n\nexport default CurrentUser;\n","import { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { getUser } from '../../Api/Api';\nimport './CurrentUser.scss';\n\nexport const CurrentUser = () => {\n  const dispatch = useDispatch();\n\n  const user = useSelector((state: RootState) => state.user);\n  const selectedUserId = useSelector((state: RootState) => state.selectedUserId);\n\n  useEffect(() => {\n    (async () => {\n      let userFromServer;\n      let serverError = false;\n\n      try {\n        userFromServer = await getUser(selectedUserId);\n      } catch (error) {\n        const str = 'An error has ocurred while getting data from server, please contact our support team';\n\n        serverError = true;\n        dispatch({ type: 'SET_USER_ERROR', payload: str });\n      }\n\n      if (!serverError) {\n        dispatch({ type: 'LOAD_USER', payload: userFromServer });\n      }\n    })();\n  }, [selectedUserId]);\n\n  const clearHandler = () => {\n    dispatch({ type: 'SET_SELECTED_USER_ID', payload: 0 });\n  };\n\n  const userLoader = () => {\n    const {\n      id, name, email, phone,\n    } = user;\n\n    if (id !== selectedUserId) {\n      return (\n        <div className=\"CurrentUser\">\n          <h2 className=\"CurrentUser__title\">\n            <span>\n              The data is loading\n            </span>\n          </h2>\n        </div>\n      );\n    }\n\n    return (\n      <div className=\"CurrentUser\">\n        <h2 className=\"CurrentUser__title\">\n          <span>\n            Selected user:\n            {' '}\n            {id}\n          </span>\n        </h2>\n\n        <h3 className=\"CurrentUser__name\">{name}</h3>\n        <p className=\"CurrentUser__email\">{email}</p>\n        <p className=\"CurrentUser__phone\">{phone}</p>\n\n        <button\n          className=\"CurrentUser__clear button\"\n          type=\"button\"\n          onClick={clearHandler}\n        >\n          Clear\n        </button>\n      </div>\n    );\n  };\n\n  return (\n    <>\n      {userLoader()}\n    </>\n  );\n};\n","const TODOS_URL = 'https://mate.academy/students-api/todos';\nconst USER_BASE_URL = 'https://mate.academy/students-api/users/';\n\nexport const getTodos = (): Promise<Todo[]> => {\n  // eslint-disable-next-line no-console\n  console.log('fetch todos');\n\n  return fetch(TODOS_URL)\n    .then(responce => responce.json());\n};\n\nexport const getUser = (userId: number): Promise<User> => {\n  // eslint-disable-next-line no-console\n  console.log('fetch user');\n\n  return fetch(USER_BASE_URL + userId)\n    .then(responce => responce.json());\n};\n","import { TodosList } from './TodosList';\n\nexport default TodosList;\n","import { useEffect, useMemo } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport classNames from 'classnames';\nimport { getTodos } from '../../Api/Api';\nimport './TodosList.scss';\n\nexport const TodosList = () => {\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    (async () => {\n      const todos = await getTodos();\n\n      dispatch({ type: 'LOAD_TODOS', payload: todos });\n    })();\n  }, []);\n\n  const todos = useSelector((state: RootState) => state.todos);\n  const searchTitle = useSelector((state: RootState) => state.searchTitle);\n  const filterParameter = useSelector((state: RootState) => state.filterParameter);\n  const selectedUserId = useSelector((state: RootState) => state.selectedUserId);\n\n  const visibleTodos = todos.filter(todo => {\n    switch (filterParameter) {\n      case 'Active':\n        return todo.title.includes(searchTitle) && !todo.completed;\n\n      case 'Completed':\n        return todo.title.includes(searchTitle) && todo.completed;\n\n      default:\n        return todo.title.includes(searchTitle);\n    }\n  });\n\n  const userSetter = (event: React.MouseEvent<HTMLButtonElement>) => {\n    const { id } = event.currentTarget.dataset;\n\n    dispatch({ type: 'SET_USER_ERROR', payload: '' });\n    dispatch({ type: 'SET_SELECTED_USER_ID', payload: Number(id) });\n  };\n\n  const changeUser = useMemo(() => userSetter, [selectedUserId]);\n\n  const handleStatusChange = (event: React.ChangeEvent) => {\n    const todoCopy = [...todos];\n    const changedTodoIndex = todoCopy.findIndex(todo => `user-button-${todo.id}` === event.target.id);\n\n    todoCopy[changedTodoIndex].completed = !todoCopy[changedTodoIndex].completed;\n    dispatch({ type: 'TOGGLE_TODO_STATUS', payload: todoCopy });\n  };\n\n  return (\n    <div className=\"TodoList\">\n      <h2>Todos:</h2>\n\n      <div className=\"TodoList__list-container\">\n        {visibleTodos.map(todo => (\n          <li\n            key={todo.id}\n            className={classNames('TodoList__item', {\n              'TodoList__item--unchecked': !todo.completed,\n              'TodoList__item--checked': todo.completed,\n            })}\n          >\n            <label htmlFor={`user-button-${todo.id}`}>\n              <input\n                type=\"checkbox\"\n                checked={todo.completed}\n                onChange={handleStatusChange}\n                id={`user-button-${todo.id}`}\n              />\n              <p>{todo.title}</p>\n            </label>\n\n            <button\n              onClick={changeUser}\n              className={classNames('TodoList__user-button', 'button', {\n                'TodoList__user-button--selected': selectedUserId === todo.userId,\n              })}\n              type=\"button\"\n              data-id={todo.userId}\n            >\n              User&nbsp;#\n              {todo.userId}\n            </button>\n          </li>\n        ))}\n      </div>\n    </div>\n  );\n};\n","import { SearchAndFilter } from './SearchAndFilter';\n\nexport default SearchAndFilter;\n","import { useDispatch } from 'react-redux';\nimport _ from 'lodash';\n\nexport const SearchAndFilter = () => {\n  const dispatch = useDispatch();\n\n  const searchInput = _.debounce((event: React.ChangeEvent<HTMLInputElement>) => {\n    dispatch({ type: 'SET_SEARCH_TITLE', payload: event.target.value });\n  }, 1000);\n\n  const filterSelect = (event: React.ChangeEvent<HTMLSelectElement>) => {\n    dispatch({ type: 'SET_FILTER_PARAMETER', payload: event.target.value });\n  };\n\n  return (\n    <div>\n      <label htmlFor=\"searchInput\">\n        Filter todos by title:\n        <input\n          type=\"text\"\n          id=\"searchInput\"\n          placeholder=\"Input title\"\n          onChange={searchInput}\n        />\n      </label>\n\n      <select\n        id=\"selectTodos\"\n        placeholder=\"Input title\"\n        onChange={filterSelect}\n      >\n        <option value=\"All\">Show all</option>\n        <option value=\"Active\">Show active</option>\n        <option value=\"Completed\">Show completed</option>\n      </select>\n    </div>\n  );\n};\n","import { useSelector } from 'react-redux';\nimport './App.scss';\nimport './styles/general.scss';\nimport CurrentUser from './components/CurrentUser';\nimport TodosList from './components/TodosList';\nimport SearchAndFilter from './components/SearcAndFilter';\n\nconst App = () => {\n  const selectedUserId = useSelector((state: RootState) => state.selectedUserId);\n  const userError = useSelector((state: RootState) => state.userError);\n\n  const getUserMessage = () => {\n    if (userError !== '') {\n      return (\n        <div className=\"App__content-container\">\n          {userError}\n        </div>\n      );\n    }\n\n    return (\n      <div className=\"App__content-container\">\n        {selectedUserId ? (\n          <CurrentUser />\n        ) : 'Please select a user'}\n      </div>\n    );\n  };\n\n  return (\n    <div className=\"App\">\n      <div className=\"App__sidebar\">\n        <h1>Redux list of todos</h1>\n        <SearchAndFilter />\n        <TodosList />\n      </div>\n      <div className=\"App__content\">\n        {getUserMessage()}\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","import ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { BrowserRouter } from 'react-router-dom';\n\nimport store from './store';\nimport App from './App';\n\n// Just a convenient component with all the wrappers for the `App`\n// The Router component (if you use it) should be placed inside the Provider\nconst Root = () => (\n  <Provider store={store}>\n    <BrowserRouter>\n      <App />\n    </BrowserRouter>\n  </Provider>\n);\n\nReactDOM.render(<Root />, document.getElementById('root'));\n"],"sourceRoot":""}